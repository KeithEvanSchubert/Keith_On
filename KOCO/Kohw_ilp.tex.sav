\chapter{Instruction Level Parallelism}
\label{c-ilp}

Instruction Level Parallelism (ILP) is low level in that it looks at how to make instructions that occur next to each other or near each other to run at the same time, or at least partially overlapping.  One of the most basic techniques is pipelining.  Consider the MIPS datapath, which has five stages to instruction execution: fetch, decode, execute, memory access, write back (update registers).  Once an instruction has been fetched, the fetch stage will be unused until the next instruction comes on.  In a non-pipelined machine, this is what happens - an instruction must go all the way through a datapath till the next instruction can start.  If there was no way to break things up or it was too dangerous, then you have no choice, but we do have a way to separate - buffer registers.

\section{Trouble In Paradise}

There are three types of hazards we can encounter.

\begin{description}
    \item[Structural] hardware cannot support the instruction combo.  Big problem in multi-cycle execution, out of order execution, and superscalar, but it can also happen in simple pipelines with things like memory access.  Fixing this requires hardware design.
    \item[Data]       data is not available to proceed.  Typical solutions fall into two categories, wait till the answer is here or send the answer from where it is now.  These are discussed more below.
    \item[Control]    at branch, which do I take and how can I rearrange code around branches in dynamic execution?
\end{description}


\subsection{Data Hazards}

\begin{tabular}{|l|l|l|p{3in}|} \hline
  Dependence      & Hazard & Example                     & When  \\ \hline
  True            & RAW    & add {\color{red} r2},r3,r4  & When: read happens before the write can finish   \\
  (data)          &        & add r5,{\color{red} r2},r6  & Requires: pipelining (without forwarding), multi-cycle \\
                  &        &                             &   units, out of order execution, etc. \\ \hline

  Output          & WAW    & add {\color{red} r2},r3,r4  & When: instructions finish out of order. \\
  (name)          &        & brgtz r7, label             & Requires: out of order execution or multiple can \\
                  &        & add {\color{red} r2},r5,r6  & multi-cycle execution units. \\ \hline

  Antidependence  & WAR    & add r3,{\color{red} r2},r4  & When: instructions start out of order. \\
  (name)          &        & add {\color{red} r2},r5,r6  & Requires: out of order execution \\ \hline

  None            & RAR    & add r3,{\color{red} r2},r4  & There is no problem here, and it is not a \\
                  &        & add r5,{\color{red} r2},r6  & hazard. I put it in because people kept asking. \\ \hline
\end{tabular}

Read after write (RAW) data hazards are also called true dependence or data dependence, because the second instruction actually needs the result from the first.  It is the strongest dependence in the sense that it cannot be broken - the second instruction must have the result of the first instruction.  Since it is so fundamental, it is the easiest to have happen.  RAW occurs when the second instruction tries to access a result before it has been written by the first instruction.  This commonly occurs in pipelines, as there are typically multiple cycles after the execute cycle completes till the result is updated in the registers.  Each cycle of delay till the update could cause an instruction being decoded to access the wrong value.  The two most common solutions to this problem are slips and register forwarding, though register renaming will also handle it (explained in subsection~\ref{ss-haz_sol}.

Write after write (WAW) hazards is the second most easy data hazard to generate, but the last most people think about.  Usually people look at this and wonder if this can ever be a problem.  This is actually the most dangerous data hazard in terms of potential to harm your results. Most machines today allow instructions to finish out of order, either by starting out of order, or because some instructions are slower and the fast ones are allowed to pass.  If two instructions finish out of order and are writing to the same register, then we have a WAW hazard.  The severity of the problem is caused by the number of instructions that are impacted.  Normally, the first instruction would finish and its result would be available for use till the second one finished in which case the second answer would be available from then on.  When a WAW hazard occurs, the second one finishes first and its result is available in the intermediate time, then the first ones result is available from then on.  Unlike a RAW hazard which impacts one instruction (and those dependent on it), WAW can effect many instructions (and those dependent on them).  The entire problem is based on the output so it is often called an output dependence.  The problem is also due to the reuse of a register for different values, so it is called name dependence (it depends on the register name you picked).   It can be fixed by a reorder buffer or register renaming.

Write after read (WAR) hazards are the hardest to occur, and have a small impact, but seem to make reasonable sense to most people.  They occur when instructions start out of order causing one instruction to read the result of an instruction that was supposed to happen after it.  It can only happen with out of order execution units, and it only effects the instruction that did the read (and those which use its results - but this is true of all data hazards).  The dependence is in reverse order so it is sometimes called anti-dependence, but it is also based on reuse of a register so it is also considered a name dependence as WAW is.  Both reorder buffers and register renaming will work to solve WAR hazards.  The most commonly known algorithm for solving this problem is by Tomasulo and is covered in chapter~\ref{c-tomasulo}.


\subsection{Hazard Solutions}\label{ss-haz_sol}
What can we do with data hazards.  Remove all performance measures and execute single instructions slowly.  I'm not kidding, it will work for all problems.  The problems are challenges that come from performance improvements, so if you are willing to run non-pipelined, single threaded, non-superscalar processors at a few hundred megahertz you will never hit one of these problems.  Your performance will stink, you won't be able to play modern games or movies, but you won't have any problems.  Most people want speed, and so we have to come up with other solutions.  Here are some of the most famous.

\begin{itemize}

    \item register interlocking

        This is basically a stop until the data is available.  Two variety exists
        \begin{description}
            \item[Stall] Entire processor is held for an instruction (or more), particularly important for structural hazards such as multi-cycle units or memory operations, since the units between the pipeline buffer registers keep running, and thus can finish what they are doing.  Essentially this is like slowing the clock down when you need to.  This tends to kill performance, but it avoids errors.  Stalling will not solve the problems register forwarding will.  It is the easiest method to implement.
            \item[Slip] only the held-up instruction and those after must wait, others can proceed.  Note it could be one of these that produces the desired answer, so this handles the same problems as forwarding, and can handle the problems that stalling does.  Overall it is the most versatile (it handles everything stalling and forwarding does), but it is not the fastest solution (same as stalling on performance).  It is the second easiest to implement.
        \end{description}

    \item register forwarding

        Often the value exists, it is just not in the final destination yet.  This technique sends the value that is missing, to the execution unit.  There is no delay if you can do it.  It cannot handle multi-cycle execution or memory accesses, and it adds cost and complexity to the design (though not bad for what you get).  This is straightforward to implement, but does add several multiplexors, wires, and control circuits to track where the result is (comparators or counters are common).

    \item register renaming

        Used to solve WAR and WAW hazards.  Register renaming adds a status field to each register, which contains the address of the instruction that is calculating its current value or 0, which means it has the correct value.  Instructions are fetched and issued in order, so the registers have the correct values in the status field, but are then buffered and executed when the system is ready (kind of like giving them a number and sticking them in a waiting room).  It can do almost anything (it can't handle control hazards).  The most basic (and famous) of these algorithms is Tomasulo's algorithm, see chapter~\ref{c-tomasulo}.

    \item reorder buffer

        Instructions are held in a buffer for writing to the register files, then they are written in the order of the original code.  These are different buffers than the pipeline buffers.  This preserves the order of the writes and thus solves WAR and WAW hazards, but increases the latency of the instruction execution.  On the bright side it can handle control hazards (the only one listed that can).
\end{itemize}

%double buffering 