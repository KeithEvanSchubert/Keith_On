%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 200 600 624
%%
%%Scilab Postscript File (Copyright 1995-2005 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	arsize dx mul norme div /dx1 exch def 
	arsize dy mul norme div /dy1 exch def 
% 	2 following lines modified (correction bug 607 (bruno 18 nov 2004)) 
	/depx tipx def 
	/depy tipy def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

/Helvetica findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica exch definefont pop

/Helvetica-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Bold exch definefont pop

/Helvetica-BoldOblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-BoldOblique exch definefont pop

/Helvetica-Oblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Oblique exch definefont pop

% used when extracting Latex from scilab generated text
%Latex:% MySetFigFont
%Latex:\begingroup\makeatletter\ifx\MySetFigFont\undefined%
%Latex:\gdef\MySetFigFont#1#2#3#4#5{%
%Latex:  \reset@font\fontsize{#1}{#2pt}%
%Latex:  \fontfamily{#3}\fontseries{#4}\fontshape{#5}%
%Latex:  \selectfont}%
%Latex:\fi\endgroup%
%Latex:% myput 
%Latex:\ifx\myput\undefined%
%Latex:\long\def\myput#1#2#3#4{\put(#1,#2){\makebox(0,0)[lb]{\smash{{\MySetFigFont{#3}{#3}{\familydefault}{\mddefault}{\updefault}{\color[rgb]{0,0,0}#4}}}}}}
%Latex:\fi%

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[0.5 5 div 0 0 0.5 5 div neg  0 3120 5 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 32 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.500000 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 34 def PaintBackground
/background 34 def PaintBackground
/background 34 def PaintBackground
33 Setcolor
5 Thickness
750 530 4500 3180 setclipzone
-1 -1 200000 200000 setclipzone
[] 0 setdash
33 Setcolor
34 Setcolor
 (drawpoly) 10 [ -35]
[750 530 750 3710 5250 3710 5250 530 750 530 
] dogrey 
34 Setcolor
/absolu true def
33 Setcolor
[] 0 setdash
33 Setcolor
1 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
1 Setcolor
5 Thickness
[] 0 setdash
/closeflag false def
 (drawpoly) 56 [ 0]
[755 3710 759 2716 764 2238 768 1955 773 1769 777 1637 782 1538 786 1461 791 1400 795 1350 
840 1113 885 1030 930 987 975 961 1020 944 1065 931 1110 922 1155 914 1200 908 1650 882 
2100 873 2550 868 3000 866 3450 864 3900 863 4350 862 4800 861 5250 860 
] dogrey 
1 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
/closeflag false def
 (drawpoly) 56 [ 0]
[755 855 759 855 764 855 768 855 773 855 777 855 782 855 786 855 791 855 795 855 
840 855 885 855 930 855 975 855 1020 855 1065 855 1110 855 1155 855 1200 855 1650 855 
2100 855 2550 855 3000 855 3450 855 3900 855 4350 855 4800 855 5250 855 
] dogrey 
32 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
33 Setcolor
5 Thickness
[] 0 setdash
33 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
33 Setcolor
(0) 723 3874 0  0.00 [723 3774 55 99] Show
%Latex:\myput{723}{366}{5}{0}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 3710 750 3773 
] dogrey 
33 Setcolor
33 Setcolor
(100) 1117 3874 0  0.00 [1117 3774 166 99] Show
%Latex:\myput{1117}{366}{5}{100}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[1200 3710 1200 3773 
] dogrey 
33 Setcolor
33 Setcolor
(200) 1567 3874 0  0.00 [1567 3774 166 99] Show
%Latex:\myput{1567}{366}{5}{200}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[1650 3710 1650 3773 
] dogrey 
33 Setcolor
33 Setcolor
(300) 2017 3874 0  0.00 [2017 3774 166 99] Show
%Latex:\myput{2017}{366}{5}{300}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[2100 3710 2100 3773 
] dogrey 
33 Setcolor
33 Setcolor
(400) 2467 3874 0  0.00 [2467 3774 166 99] Show
%Latex:\myput{2467}{366}{5}{400}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[2550 3710 2550 3773 
] dogrey 
33 Setcolor
33 Setcolor
(500) 2917 3874 0  0.00 [2917 3774 166 99] Show
%Latex:\myput{2917}{366}{5}{500}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[3000 3710 3000 3773 
] dogrey 
33 Setcolor
33 Setcolor
(600) 3367 3874 0  0.00 [3367 3774 166 99] Show
%Latex:\myput{3367}{366}{5}{600}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[3450 3710 3450 3773 
] dogrey 
33 Setcolor
33 Setcolor
(700) 3817 3874 0  0.00 [3817 3774 166 99] Show
%Latex:\myput{3817}{366}{5}{700}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[3900 3710 3900 3773 
] dogrey 
33 Setcolor
33 Setcolor
(800) 4267 3874 0  0.00 [4267 3774 166 99] Show
%Latex:\myput{4267}{366}{5}{800}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[4350 3710 4350 3773 
] dogrey 
33 Setcolor
33 Setcolor
(900) 4717 3874 0  0.00 [4717 3774 166 99] Show
%Latex:\myput{4717}{366}{5}{900}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[4800 3710 4800 3773 
] dogrey 
33 Setcolor
33 Setcolor
(1000) 5139 3874 0  0.00 [5139 3774 222 99] Show
%Latex:\myput{5139}{366}{5}{1000}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[5250 3710 5250 3773 
] dogrey 
33 Setcolor
 (drawsegs) 4 [ 33]
[750 3710 750 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[975 3710 975 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[1200 3710 1200 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[1425 3710 1425 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[1650 3710 1650 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[1875 3710 1875 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[2100 3710 2100 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[2325 3710 2325 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[2550 3710 2550 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[2775 3710 2775 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[3000 3710 3000 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[3225 3710 3225 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[3450 3710 3450 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[3675 3710 3675 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[3900 3710 3900 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[4125 3710 4125 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[4350 3710 4350 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[4575 3710 4575 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[4800 3710 4800 3757 
] dogrey 
 (drawsegs) 4 [ 33]
[5025 3710 5025 3757 
] dogrey 
/Helvetica findfont 100 scf mul scalefont setfont
33 Setcolor
(2.0) 539 3749 0  0.00 [539 3649 139 99] Show
%Latex:\myput{539}{491}{5}{2.0}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 3710 690 3710 
] dogrey 
33 Setcolor
33 Setcolor
(2.1) 539 3351 0  0.00 [539 3251 139 99] Show
%Latex:\myput{539}{889}{5}{2.1}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 3312 690 3312 
] dogrey 
33 Setcolor
33 Setcolor
(2.2) 539 2954 0  0.00 [539 2854 139 99] Show
%Latex:\myput{539}{1286}{5}{2.2}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 2915 690 2915 
] dogrey 
33 Setcolor
33 Setcolor
(2.3) 539 2556 0  0.00 [539 2456 139 99] Show
%Latex:\myput{539}{1684}{5}{2.3}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 2517 690 2517 
] dogrey 
33 Setcolor
33 Setcolor
(2.4) 539 2159 0  0.00 [539 2059 139 99] Show
%Latex:\myput{539}{2081}{5}{2.4}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 2120 690 2120 
] dogrey 
33 Setcolor
33 Setcolor
(2.5) 539 1761 0  0.00 [539 1661 139 99] Show
%Latex:\myput{539}{2479}{5}{2.5}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 1722 690 1722 
] dogrey 
33 Setcolor
33 Setcolor
(2.6) 539 1364 0  0.00 [539 1264 139 99] Show
%Latex:\myput{539}{2876}{5}{2.6}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 1325 690 1325 
] dogrey 
33 Setcolor
33 Setcolor
(2.7) 539 966 0  0.00 [539 866 139 99] Show
%Latex:\myput{539}{3274}{5}{2.7}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 927 690 927 
] dogrey 
33 Setcolor
33 Setcolor
(2.8) 539 569 0  0.00 [539 469 139 99] Show
%Latex:\myput{539}{3671}{5}{2.8}
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 530 690 530 
] dogrey 
33 Setcolor
 (drawsegs) 4 [ 33]
[750 3710 705 3710 
] dogrey 
 (drawsegs) 4 [ 33]
[750 3511 705 3511 
] dogrey 
 (drawsegs) 4 [ 33]
[750 3312 705 3312 
] dogrey 
 (drawsegs) 4 [ 33]
[750 3114 705 3114 
] dogrey 
 (drawsegs) 4 [ 33]
[750 2915 705 2915 
] dogrey 
 (drawsegs) 4 [ 33]
[750 2716 705 2716 
] dogrey 
 (drawsegs) 4 [ 33]
[750 2517 705 2517 
] dogrey 
 (drawsegs) 4 [ 33]
[750 2319 705 2319 
] dogrey 
 (drawsegs) 4 [ 33]
[750 2120 705 2120 
] dogrey 
 (drawsegs) 4 [ 33]
[750 1921 705 1921 
] dogrey 
 (drawsegs) 4 [ 33]
[750 1722 705 1722 
] dogrey 
 (drawsegs) 4 [ 33]
[750 1524 705 1524 
] dogrey 
 (drawsegs) 4 [ 33]
[750 1325 705 1325 
] dogrey 
 (drawsegs) 4 [ 33]
[750 1126 705 1126 
] dogrey 
 (drawsegs) 4 [ 33]
[750 927 705 927 
] dogrey 
 (drawsegs) 4 [ 33]
[750 729 705 729 
] dogrey 
33 Setcolor
 (drawsegs) 4 [ 33]
[750 3710 5250 3710 
] dogrey 
33 Setcolor
33 Setcolor
 (drawsegs) 4 [ 33]
[750 3710 750 530 
] dogrey 
33 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
33 Setcolor
[] 0 setdash
33 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
33 Setcolor
(Continuous Compounding Graph) 2268 292 0  0.00 [2268 192 1461 99] Show
%Latex:\myput{2268}{3948}{5}{Continuous Compounding Graph}
33 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
33 Setcolor
([n] Number of Compoundings) 2347 4077 0  0.00 [2347 3977 1306 99] Show
%Latex:\myput{2347}{163}{5}{[n] Number of Compoundings}
33 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
33 Setcolor
([1+APY] Multiplier of Principle) 475 2759 0 270.00 [475 2659 1319 99] Show
%Latex:\myput{475}{1481}{5}{[1+APY] Multiplier of Principle}
33 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
%Latex:\end{picture}
 showpage

 end saved restore 


